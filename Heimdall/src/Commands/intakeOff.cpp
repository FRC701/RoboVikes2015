// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "intakeOff.h"
using namespace std;

intakeOff::intakeOff() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void intakeOff::Initialize() {
	
}

// Called repeatedly when this Command is scheduled to run
void intakeOff::Execute() {
	if(Robot::prefs->GetString("coDriver") == "Connor")
	{
		if(Robot::oi->getcoDriver()->GetRawAxis(1) != 0.0
				&& Robot::oi->getcoDriver()->GetRawAxis(0) == 0.0)
		{
			Robot::intake->intakeLeftMotor->Set(Robot::oi->getcoDriver()->GetRawAxis(1));
			Robot::intake->intakeRightMotor->Set(Robot::oi->getcoDriver()->GetRawAxis(1));
		}
		if(Robot::oi->getcoDriver()->GetRawAxis(0) != 0.0
				&& Robot::oi->getcoDriver()->GetRawAxis(1) == 0.0)
		{
			Robot::intake->intakeLeftMotor->Set(Robot::oi->getcoDriver()->GetRawAxis(0));
			Robot::intake->intakeRightMotor->Set(Robot::oi->getcoDriver()->GetRawAxis(0) * -1);
		}
	}
	else if(Robot::prefs->GetString("coDriver") == "Fish")
	{
		Robot::intake->intakeLeftMotor->Set(Robot::oi->getcoDriver()->GetRawAxis(4));
		Robot::intake->intakeRightMotor->Set(Robot::oi->getcoDriver()->GetRawAxis(4));
	}
	else
	{
		Robot::intake->intakeRightMotor->Set(0.0);		//sets intake motors to default
		Robot::intake->intakeLeftMotor->Set(0.0);		// state of zero
	}
}

// Make this return true when this Command no longer needs to run execute()
bool intakeOff::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void intakeOff::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void intakeOff::Interrupted() {

}
