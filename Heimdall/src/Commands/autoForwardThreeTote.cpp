// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "zeroLevel.h"
#include "intakeIn.h"
#include "intakeOut.h"
#include "haySqueezerOpen.h"
#include "autoForwardThreeTote.h"

autoForwardThreeTote::autoForwardThreeTote() {

	AddSequential(new zeroLevel());		//Grab first tote
	//Strafe right to avoid containers. Using UltraSonic side to determain when we have moved far enough from the wall
	//Parallel starts
		//Tote move to OneTote Level
			//-once clear open intake
		//Drive Forward till UltraSonic side detects container at its side.
	//Strafe over till infront of tote: UltraSonic front or side? Can't side because of container
	//Drive forward till tote in reach of intake
	AddSequential(new intakeIn());		//Close intake
	//Parallel:
		//Turn intake on for amount of time
		//Go to Zero Level to pick up tote
	//Strafe right to avoid containers. Using UltraSonic side to determain when we have moved far enough from the wall
	//Open intake
	//Parallel:
		//Tote move to One Level
		//Drive Forward 'till UltraSonice side detects container
	//Strafe over back in line
	//UltraSonic front to close up on tote
	//Close intake
	AddSequential(new intakeIn());
	//Strafe to autoZone
	AddSequential(new zeroLevel());
	AddSequential(new intakeOut());
	AddSequential(new haySqueezerOpen());
	//Drive back


	// Add Commands here:
	// e.g. AddSequential(new Command1());
	//      AddSequential(new Command2());
	// these will run in order.

	// To run multiple commands at the same time,
	// use AddParallel()
	// e.g. AddParallel(new Command1());
	//      AddSequential(new Command2());
	// Command1 and Command2 will run in parallel.

	// A command group will require all of the subsystems that each member
	// would require.
	// e.g. if Command1 requires chassis, and Command2 requires arm,
	// a CommandGroup containing them would require both the chassis and the
	// arm.
}
