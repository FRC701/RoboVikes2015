// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "slideMaster.h"

slideMaster::slideMaster() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::slide);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void slideMaster::Initialize() {
	
}

// Called repeatedly when this Command is scheduled to run
void slideMaster::Execute() {
	int leftTrigger = 2;
	int rightTrigger = 3;
	dButtonRB = new JoystickButton(Robot::oi->getdriver(), 6);
	dButtonLB = new JoystickButton(Robot::oi->getdriver(), 5);
	
	if(Robot::oi->getdriver()->GetRawAxis(leftTrigger) > 0.0 && Robot::oi->getdriver()->
																GetRawAxis(rightTrigger) == 0.0)
	{
		Robot::slide->slideFrontMotor1->Set(Robot::oi->getdriver()->GetRawAxis(leftTrigger) * -1);
		Robot::slide->slideFrontMotor2->Set(Robot::oi->getdriver()->GetRawAxis(leftTrigger) * -1);
		Robot::slide->slideRearMotor->Set(Robot::oi->getdriver()->GetRawAxis(leftTrigger));
	}
	else if(Robot::oi->getdriver()->GetRawAxis(rightTrigger) > 0.0 && Robot::oi->getdriver()->
																	  GetRawAxis(leftTrigger) == 0.0)
	{
		Robot::slide->slideFrontMotor1->Set(Robot::oi->getdriver()->GetRawAxis(rightTrigger));
		Robot::slide->slideFrontMotor2->Set(Robot::oi->getdriver()->GetRawAxis(rightTrigger));
		Robot::slide->slideRearMotor->Set(Robot::oi->getdriver()->GetRawAxis(rightTrigger) * -1);
	}
	else if(dButtonRB->Get() == true)

	{

	}
	else if(dButtonLB->Get() == true)
	{
		
	}
}

// Make this return true when this Command no longer needs to run execute()
bool slideMaster::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void slideMaster::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void slideMaster::Interrupted() {

}
