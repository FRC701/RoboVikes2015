// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "autoOneTote.h"
#include "autoHaySqueezerOpen.h"
#include "haySqueezerClose.h"
#include "zeroLevel.h"
#include "oneLevel.h"
#include "twoLevel.h"
#include "autoDrive.h"
#include "autoStrafe.h"
#include "Delay.h"
#include "chassisStopMoving.h"


autoOneTote::autoOneTote() {
	// Add Commands here:
	// e.g. AddSequential(new Command1());
	//      AddSequential(new Command2());
	// these will run in order.

	// Drop the elevator down and pick up the yellow tote
	AddSequential(new autoHaySqueezerOpen());
	AddSequential(new zeroLevel());
	AddSequential(new haySqueezerClose());

	AddSequential(new Delay(0.5));

	// Lift the tote off of the ground
	AddSequential(new oneLevel());

	// Slightly strafe to the right to avoid hitting the container
	AddSequential(new autoStrafe(500));

	// Drive into the auto zone
	AddSequential(new autoDrive(6580));

	// Stop moving (for debugging purposes)
	AddSequential(new chassisStopMoving());

	// The following lines of code should all be commented out due
	// to the Madera regional's rules
	// Put down the tote and drive backwards to abandon contact
	// with the tote
	// AddSequential(new zeroLevel());
	// AddSequential(new autoHaySqueezerOpen());
	// AddSequential(new twoLevel());
	// AddSequential(new autoDrive(-500));

	// To run multiple commands at the same time,
	// use AddParallel()
	// e.g. AddParallel(new Command1());
	//      AddSequential(new Command2());
	// Command1 and Command2 will run in parallel.

	// A command group will require all of the subsystems that each member
	// would require.
	// e.g. if Command1 requires chassis, and Command2 requires arm,
	// a CommandGroup containing them would require both the chassis and the
	// arm.
}
