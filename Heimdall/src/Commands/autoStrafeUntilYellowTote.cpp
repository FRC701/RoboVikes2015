// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "autoStrafeUntilYellowTote.h"

autoStrafeUntilYellowTote::autoStrafeUntilYellowTote() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);
	lightSensorTimer = 0;
	finish = false;
	numberOfDetections = 0;
	lastLightSensorCondition = false;
	currentLightSensorCondition = false;
}

// Called just before this Command runs the first time
void autoStrafeUntilYellowTote::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void autoStrafeUntilYellowTote::Execute() {

	if(numberOfDetections == 0)			//Go Right
	{
		Robot::chassis->leftFront->Set(0.75);
		Robot::chassis->leftRear->Set(-1.0);
		Robot::chassis->rightFront->Set(-1.0);
		Robot::chassis->rightRear->Set(0.75);
	}
	else if(numberOfDetections == 1)	//Go Left
	{
		Robot::chassis->leftFront->Set(-1.0);
		Robot::chassis->leftRear->Set(0.75);
		Robot::chassis->rightFront->Set(0.75);
		Robot::chassis->rightRear->Set(-1.0);
	}
	else
	{
		finish = true;
	}
	detection();
}

// Make this return true when this Command no longer needs to run execute()
bool autoStrafeUntilYellowTote::IsFinished() {

	return finish;
}


// Called once after isFinished returns true
void autoStrafeUntilYellowTote::End() {
	lightSensorTimer->Stop();
	lightSensorTimer->Reset();
	finish = false;
	numberOfDetections = 0;
	Robot::chassis->leftFront->Set(0.0);
	Robot::chassis->leftRear->Set(0.0);
	Robot::chassis->rightFront->Set(0.0);
	Robot::chassis->rightRear->Set(0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void autoStrafeUntilYellowTote::Interrupted() {

}

void autoStrafeUntilYellowTote::detection()
{
	if(Robot::chassis->leftLightSensor->Get() == true && Robot::chassis->rightLightSensor->Get() == true)
		currentLightSensorCondition = true;
	else
		currentLightSensorCondition = false;
	if(currentLightSensorCondition != lastLightSensorCondition)
	{
		numberOfDetections++;
	}
}


