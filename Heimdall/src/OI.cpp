// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"
#include "BuiltInAccelerometer.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Drive.h"
#include "Commands/PneIntakeOut.h"
#include "Commands/SlideLeft.h"
#include "Commands/SlideOff.h"
#include "Commands/SlideRight.h"
#include "Commands/intakeIn.h"
#include "Commands/intakeOff.h"
#include "Commands/intakeOut.h"
#include "Commands/slideClockRotation.h"
#include "Commands/slideCounterClockRotation.h"
#include "Commands/slideMaster.h"
#include "Commands/slideRotation.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	driver = new Joystick(0);
	
	dButtonY = new JoystickButton(driver, 4);
	dButtonY->WhileHeld(new intakeIn());
	dButtonA = new JoystickButton(driver, 1);
	dButtonA->WhenReleased(new PneIntakeOut());
	dButtonB = new JoystickButton(driver, 2);
	dButtonB->WhileHeld(new intakeOut());
	dButtonRB = new JoystickButton(driver, 6);
	dButtonRB->WhileHeld(new SlideRight());
	dButtonLB = new JoystickButton(driver, 5);
	dButtonLB->WhileHeld(new SlideLeft());
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	SmartDashboard::PutData("Drive", new Drive());

	SmartDashboard::PutData("SlideLeft", new SlideLeft());

	SmartDashboard::PutData("SlideOff", new SlideOff());

	SmartDashboard::PutData("SlideRight", new SlideRight());

	SmartDashboard::PutData("slideClockRotation", new slideClockRotation());

	SmartDashboard::PutData("slideCounterClockRotation", new slideCounterClockRotation());

	SmartDashboard::PutData("intakeOut", new intakeOut());

	SmartDashboard::PutData("intakeIn", new intakeIn());

	SmartDashboard::PutData("intakeOff", new intakeOff());

	SmartDashboard::PutData("PneIntakeOut", new PneIntakeOut());

	SmartDashboard::PutData("slideRotation", new slideRotation());

	SmartDashboard::PutData("slideMaster", new slideMaster());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getdriver() {
	return driver;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
